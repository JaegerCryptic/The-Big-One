package edu.view.ui.excercises;

import edu.curd.dto.ClassDTO;
import edu.curd.dto.ClassExercisesDTO;
import edu.curd.dto.StudentGradesDTO;
import edu.curd.operation.JDBCDataObject;
import edu.data.service.ClassExcercisesService;
import edu.data.service.ManageClassService;
import edu.data.service.ManageGradesService;
import edu.data.service.impl.ClassExcercisesServiceImpl;
import edu.data.service.impl.ManageClassImpl;
import edu.data.service.impl.ManageGradesServiceImpl;
import edu.view.ui.util.GenericComboItem;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

public class ViewStudentGrades extends javax.swing.JDialog {

    ClassExcercisesService manageClassExercises = new ClassExcercisesServiceImpl();
    ManageClassService manageClassService = new ManageClassImpl();
    ManageGradesService manageGradesService = new ManageGradesServiceImpl();

    public ViewStudentGrades(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initGui();
    }

    public ViewStudentGrades(java.awt.Frame parent) {
        super(parent);
        initComponents();
        initGui();
    }

    public ViewStudentGrades() {
        super();
        initComponents();
        initGui();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        header = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        content = new javax.swing.JPanel();
        uName_label = new javax.swing.JLabel();
        uPass_label = new javax.swing.JLabel();
        cmbExcersise = new javax.swing.JComboBox<>();
        cmbClasses = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentMarks = new javax.swing.JTable();
        cancel = new javax.swing.JButton();
        cmbTopics = new javax.swing.JComboBox<>();
        uPass_label1 = new javax.swing.JLabel();
        save = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        header.setBackground(new java.awt.Color(30, 130, 76));
        header.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabel1.setBackground(new java.awt.Color(102, 102, 102));
        jLabel1.setFont(new java.awt.Font("Arial", 1, 48)); // NOI18N
        jLabel1.setText("View Grades");

        javax.swing.GroupLayout headerLayout = new javax.swing.GroupLayout(header);
        header.setLayout(headerLayout);
        headerLayout.setHorizontalGroup(
            headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
        headerLayout.setVerticalGroup(
            headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        content.setBackground(new java.awt.Color(51, 51, 51));

        uName_label.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        uName_label.setForeground(new java.awt.Color(204, 204, 204));
        uName_label.setText("Class ID:");

        uPass_label.setBackground(new java.awt.Color(0, 0, 0));
        uPass_label.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        uPass_label.setForeground(new java.awt.Color(204, 204, 204));
        uPass_label.setText("Excercise Type:");

        cmbExcersise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbExcersiseActionPerformed(evt);
            }
        });

        cmbClasses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbClassesActionPerformed(evt);
            }
        });

        studentMarks.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        studentMarks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Grade ID", "Topic ID", "Student ID", "Name", "Grade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(studentMarks);

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        cmbTopics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTopicsActionPerformed(evt);
            }
        });

        uPass_label1.setBackground(new java.awt.Color(0, 0, 0));
        uPass_label1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        uPass_label1.setForeground(new java.awt.Color(204, 204, 204));
        uPass_label1.setText("Topic:");

        save.setText("Update Marks");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout contentLayout = new javax.swing.GroupLayout(content);
        content.setLayout(contentLayout);
        contentLayout.setHorizontalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(contentLayout.createSequentialGroup()
                                    .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(uPass_label)
                                        .addComponent(uName_label))
                                    .addGap(64, 64, 64)
                                    .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(cmbClasses, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(cmbExcersise, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(contentLayout.createSequentialGroup()
                                    .addComponent(uPass_label1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmbTopics, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(cancel)
                        .addGap(76, 76, 76)
                        .addComponent(save)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        contentLayout.setVerticalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uName_label)
                    .addComponent(cmbClasses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uPass_label)
                    .addComponent(cmbExcersise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uPass_label1)
                    .addComponent(cmbTopics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancel)
                    .addComponent(save))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(content, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(header, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(header, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(content, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadClassDetails() {
        List<JDBCDataObject> classObjLis = manageClassService.viewAllClasses();
        if (classObjLis != null && !classObjLis.isEmpty()) {

            classObjLis.forEach((classRow) -> {
                ClassDTO classObject = (ClassDTO) classRow;
                cmbClasses.addItem(new GenericComboItem(classObject.getClassId(), classObject.getTopic()).toString());
            });
        } else {
            //JOptionPane.showMessageDialog(this, "No Classes to display!");
        }
    }

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        ViewStudentGrades.CHANGED_ROWS.clear();
        this.setVisible(false);
    }//GEN-LAST:event_cancelActionPerformed

    private void cleanForm() {
        cmbExcersise.removeAllItems();
        cmbTopics.removeAllItems();
        DefaultTableModel defaultTableModel = (DefaultTableModel) studentMarks.getModel();
        defaultTableModel.setRowCount(0);
    }

    private void cmbClassesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbClassesActionPerformed

        cleanForm();
        
        List<ClassExercisesDTO> excercises = manageClassExercises.viewAllExcercisesForClass(getSelectedClassId());

        if (excercises == null || excercises.isEmpty()) {
            // JOptionPane.showMessageDialog(this, "No Excersise were Added to the class!");
            cleanForm();
            return;
        }

        DefaultComboBoxModel dataModel = new javax.swing.DefaultComboBoxModel<>();
        dataModel.addElement("----- SELECT -------");

        for (ClassExercisesDTO exc : excercises) {
            dataModel.addElement(String.valueOf(exc.getExcerciseId()) + " - " + exc.getExcerciseType());
        }

        cmbExcersise.setModel(dataModel);
    }//GEN-LAST:event_cmbClassesActionPerformed

    private void cmbExcersiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbExcersiseActionPerformed
        if (cmbExcersise.getSelectedIndex() > 0) {
            loadTopics();
        } else {
            DefaultTableModel defaultTableModel = (DefaultTableModel) studentMarks.getModel();
            defaultTableModel.setRowCount(0);
            cmbTopics.removeAllItems();
        }
    }//GEN-LAST:event_cmbExcersiseActionPerformed

    private void cmbTopicsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTopicsActionPerformed
        if (cmbTopics.getSelectedIndex() > 0) {
            loadTableData();
        } else {
            DefaultTableModel defaultTableModel = (DefaultTableModel) studentMarks.getModel();
            defaultTableModel.setRowCount(0);
        }


    }//GEN-LAST:event_cmbTopicsActionPerformed

    private static int GRADE_COL_ID = 0;
    private static int TOPIC_COL_ID = 1;
    private static int STUDENT_COL_ID = 2;
    private static int NAME_COL_ID = 3;
    private static int GRADE_COL = 4;

    private Set<Integer> studetnID = new HashSet<>();

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed

        try {
            for (int rowId : ViewStudentGrades.CHANGED_ROWS) {
                int gradesId = Integer.valueOf(studentMarks.getModel().getValueAt(rowId, GRADE_COL_ID).toString());
                int studentTopicId = Integer.valueOf(studentMarks.getModel().getValueAt(rowId, TOPIC_COL_ID).toString());

                if (gradesId == 0 || getSelectedTopicId() != studentTopicId) {
// ADD New Entry to Marks
                    int studentEnrollId = Integer.valueOf(studentMarks.getModel().getValueAt(rowId, STUDENT_COL_ID).toString());

                    String newScore = (studentMarks.getModel().getValueAt(rowId, GRADE_COL).toString());
                    boolean isInserted = manageGradesService.insertMarks(studentEnrollId, getSelectedTopicId(), newScore);

                    if (!isInserted) {
                        String studentName = (studentMarks.getModel().getValueAt(rowId, NAME_COL_ID).toString());
                        JOptionPane.showMessageDialog(this, "Unable to insert the grades for student : \n" + studentName);
                    }

                } else if (gradesId > 0) {
// Update Marks
                    String newScore = (studentMarks.getModel().getValueAt(rowId, GRADE_COL).toString());
                    boolean isUpdated = manageGradesService.updateMarks(gradesId, newScore);

                    if (!isUpdated) {
                        String studentName = (studentMarks.getModel().getValueAt(rowId, NAME_COL_ID).toString());
                        JOptionPane.showMessageDialog(this, "Unable to update the grades for student : \n" + studentName);
                    }
                }

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error while updating marks.");
        }

        cmbTopicsActionPerformed(null);
        ViewStudentGrades.CHANGED_ROWS.clear();

    }//GEN-LAST:event_saveActionPerformed

    private void loadTopics() {

        Map<Integer, String> topics = manageClassExercises.viewAllTopicsForExcercises(getSelectedExcercisesId());

        if (topics == null || topics.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No excercise topics were assigned!");
            cmbTopics.removeAllItems();
            return;
        }

        DefaultComboBoxModel dataModel = new javax.swing.DefaultComboBoxModel<>();
        dataModel.addElement("----- SELECT -------");

        topics.keySet().forEach((topicId) -> {

            dataModel.addElement(String.valueOf(topicId) + " - " + topics.get(topicId));
        });

        cmbTopics.setModel(dataModel);
    }

    private void loadTableData() {
        int topicId = getSelectedTopicId();
        studetnID.clear();
        List<StudentGradesDTO> studentGrades = manageGradesService.viewStudentGrades(getSelectedClassId(), getSelectedExcercisesId(), topicId);

        if (studentGrades == null || studentGrades.isEmpty()) {
            DefaultTableModel defaultTableModel = (DefaultTableModel) studentMarks.getModel();
            defaultTableModel.setRowCount(0);

            return;
        }

        DefaultTableModel defaultTableModel = (DefaultTableModel) studentMarks.getModel();

        defaultTableModel.setRowCount(0);

        studentGrades.forEach((studentDTO) -> {

            String gradeId = String.valueOf(studentDTO.getGradesId());
            String studentEnrollId = String.valueOf(studentDTO.getStudentEnrollmentId());
            String score = studentDTO.getScore();
            String studentTopicId = String.valueOf(studentDTO.getTopicId());

            if (studentDTO.getGradesId() == 0 && (studentDTO.getTopicId() == 0)) {
                score = "PENDING";

                studetnID.add(studentDTO.getStudentEnrollmentId());
                defaultTableModel.addRow(new Object[]{gradeId, studentTopicId, studentEnrollId, studentDTO.getStudentFullName(), score});

            } else if (studentDTO.getGradesId() > 0) {
                // 
                if (studentDTO.getTopicId() != topicId) {
                    score = "PENDING";
                }

                studetnID.add(studentDTO.getStudentEnrollmentId());
                defaultTableModel.addRow(new Object[]{gradeId, studentTopicId, studentEnrollId, studentDTO.getStudentFullName(), score});

            }
//)

        });

    }

    private String getSelectedExcercisesText() {
        try {
            String selectedClass = (String) cmbExcersise.getSelectedItem();
            return selectedClass.split(" - ")[1];
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No Classes were selected!");
        }
        return "";
    }

    private int getSelectedExcercisesId() {
        try {
            String selectedClass = (String) cmbExcersise.getSelectedItem();
            int selectedClassId = Integer.valueOf(selectedClass.split(" - ")[0]);
            return selectedClassId;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No Classes were selected!");
        }
        return 0;
    }

    private int getSelectedTopicId() {
        try {
            String selectedTopic = (String) cmbTopics.getSelectedItem();
            int selectedTopicId = Integer.valueOf(selectedTopic.split(" - ")[0]);
            return selectedTopicId;
        } catch (Exception e) {
          //  JOptionPane.showMessageDialog(this, "No Topics were selected!");
        }
        return 0;
    }

    private int getSelectedClassId() {
        try {
            String selectedClass = (String) cmbClasses.getSelectedItem();
            return Integer.valueOf(selectedClass.split(" - ")[0]);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No Classes were selected!");
        }
        return 0;
    }

    private String getSelectedClassText() {
        try {
            String selectedClass = (String) cmbClasses.getSelectedItem();
            return selectedClass.split(" - ")[1];
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No Classes were selected!");
        }
        return "";
    }

    private void initGui() {

        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowOpened(WindowEvent e) {
                loadClassDetails();
                //  studentMarks.removeColumn(studentMarks.getColumnModel().getColumn(0));
                studentMarks.getModel().addTableModelListener(new MyTableModelListener(studentMarks));
                ViewStudentGrades.CHANGED_ROWS.clear();
            }
        });

    }

    static Set<Integer> CHANGED_ROWS = new HashSet<>();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel;
    private javax.swing.JComboBox<String> cmbClasses;
    private javax.swing.JComboBox<String> cmbExcersise;
    private javax.swing.JComboBox<String> cmbTopics;
    private javax.swing.JPanel content;
    private javax.swing.JPanel header;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton save;
    private javax.swing.JTable studentMarks;
    private javax.swing.JLabel uName_label;
    private javax.swing.JLabel uPass_label;
    private javax.swing.JLabel uPass_label1;
    // End of variables declaration//GEN-END:variables
}

class MyTableModelListener implements TableModelListener {

    JTable table;

    MyTableModelListener(JTable table) {
        this.table = table;
    }

    public void tableChanged(TableModelEvent e) {
        if (e.getType() == TableModelEvent.UPDATE && e.getFirstRow() == e.getLastRow()) {
            ViewStudentGrades.CHANGED_ROWS.add(e.getFirstRow());
        }

    }

}
